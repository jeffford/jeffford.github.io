/*NOTE: A program  for Dijkstra's Shortest Path submitted to for an ASC homework assignment in Dr. Slotterbeck’s Hiram College class.
------------------------------------*/

/* Program to find the Shortest Path in a graph */
/* Written by: Matt Boggus */

/** For the algorithm given, the following variables mean:	**/
/** State values: 
1 - in shortest path   			2 - in S               			3 - consideration edge 			4 - not explored yet   			0 - explored and out    			**/
/** Distance stores d(v) where v is the node the edge ends at 	**/

main SP
deflog (TRUE, 1);
deflog (FALSE, 0);

/* IMPORTANT NOTE: As the emulator doesn't support scalar input, START and ENDING must be set manually and the program  recompiled.*/
define (START, 1);
define (ENDING, 11);

int parallel tail[$], head[$], weight[$], state[$], distance[$]; 
int scalar node;
index parallel xx[$];
logical parallel nxtnod[$], graph[$], result[$], used[$];
associate head[$], tail[$], weight[$], state[$], distance[$] with graph[$];

/** input **/
read tail[$], head[$], weight[$] in graph[$];

PERFORM = 1;
/** Create initial state of the graph and path **/
distance[$] = 0;   /** set empty distance values **/
if (tail[$] == START) then state[$] = 3; else state[$] = 4; endif;/* set consideration edges */
if (tail[$] == START) then distance[$] = weight[$]; endif;	  /* set consideration edges distance */
if (head[$] == START) then state[$] = 0; endif; 		  /* remove edges going into START */
if (tail[$] == ENDING) then state[$] = 0; endif;		  /* remove edges going out of ENDING */

/** LOOP to find S **/
first 
	node = START;
loop
	/* Find next node to add and set values for it */
	if (state[$] == 3) then nxtnod[$] = mindex(distance[$]); endif;
	node = head[nxtnod[$]];

	/* Eliminate all other edges to new node by changing states */
	if (head[$] == node && state[$] != 2) then state[$] = 0; endif;

	/* Add selected edge to graph */
	state[nxtnod[$]] = 2;

	/* Find new possible nodes and set their distances and states */
	if (state[$] == 4 && tail[$] == node) then distance[$] = distance[nxtnod[$]] + weight[$]; endif;
	if (state[$] == 4 && tail[$] == node) then state[$] = 3; endif;

	nxtnod[$] = FALSE;
until node == ENDING

endloop;
/** END LOOP to find S **/

/** LOOP to trace back shortest path **/
first
	node = ENDING;
loop
	if (state[$] == 2) then nxtnod[$] = head[$] == node; endif;
	node = tail[nxtnod[$]];

	state[nxtnod[$]] = 1;

	nxtnod[$] = FALSE;
until node == START

endloop;
/** END LOOP to trace back shortest path **/
PERFORM = 0;
MSG "SCALAR OPERATIONS" SC_PERFORM;
MSG "PARALLEL OPERATIONS" PA_PERFORM;

/** print shortest path **/
if (state[$] == 1) then result[$] = TRUE; endif;
print tail[$] head[$] weight[$] in result[$];

end;
