#include <iostream>

#ifdef WINDOWS
#include <windows.h> 
#endif

// this Bank Account Example is an example of using Scoped Locking in OpenMP
// This is a class for guard objects using OpenMP
//  It is adapted from the book
//  "Pattern-Oriented Software Architecture". 
//  See article here: http://www.thinkingparallel.com/2006/08/21/scoped-locking-vs-critical-in-openmp-a-personal-shootout/

using namespace std;

/* Normally this will go into a header file 
* named "omp_guard.hpp"
*
* it has been inlined to for class discussion purposes
*/
/*OMP_GUARD_HPP_*/

#ifndef OMP_GUARD_HPP_
#define OMP_GUARD_HPP_
 
#include <omp.h>

// this Bank Account Example is an example of using Scoped Locking in OpenMP
// This is a class for guard objects using OpenMP
//  It is adapted from the book
//  "Pattern-Oriented Software Architecture". 
class omp_guard {
public:
    /** Acquire the lock and store a pointer to it */
    omp_guard (omp_nest_lock_t &lock);
    /** Set the lock explicitly */
    void acquire ();
    /** Release the lock explicitly (owner thread only!) */
    void release ();
    /** Destruct guard object */
    ~omp_guard ();
 
private:
    omp_nest_lock_t *lock_;  // pointer to our lock
   
    // Disallow copies or assignment
    omp_guard (const omp_guard &);
    void operator= (const omp_guard &);
};
 
#endif /*OMP_GUARD_HPP_*/




/** The class contained in this file is a guard object */
 
 
/** Construct guard object and acquire our lock */
omp_guard::omp_guard (omp_nest_lock_t &lock) : lock_ (&lock) 
{
    acquire ();
}
 
/** Explicitly set our lock */
void omp_guard::acquire ()
{
	omp_set_nest_lock (lock_);

}
 
/** Explicitly unset our lock.
* Only unset it, though, if we are still the owner.
*/
void omp_guard::release ()
{

	omp_unset_nest_lock (lock_);

}
 
/** Destruct guard object, release the lock */
omp_guard::~omp_guard ()
{
    release ();
}


// C++ version of an interlocked bank account using scoped locking
class BankAccountScoped {
private:
   double _balance;
   omp_nest_lock_t _guard;
public:
   BankAccountScoped()
   {
	  _balance = 500.0;
	  omp_init_nest_lock (&_guard);
   }

   void deposit(double amount) {
      omp_guard my_guard (_guard);
      _balance += amount;
   }
   void withdraw(double amount) {
      omp_guard my_guard (_guard);
      //if(_balance >= amount) _balance -= amount;
	  if(_balance >= amount) 
	  {
		 double temp;
		 temp = getBalance();
		 setBalance(temp - amount);
	  }
   }
   double getBalance() {
      omp_guard my_guard (_guard);
      return _balance;
   }
   
   void setBalance(int x) {
      omp_guard my_guard (_guard);
      _balance = x;
   }
      
   ~BankAccountScoped()
   {
	  omp_destroy_nest_lock (&_guard);
   }

};

// C++ version of an interlocked bank account using OpenMP Critical Section
class BankAccountCritical {
private:
   double _balance;
public:
   BankAccountCritical()
   {
	  _balance = 500.0;
   }

   void deposit(double amount) {
#pragma omp critical 
	   {
			_balance += amount;
	   }
   }
   void withdraw(double amount) {
#pragma omp critical 
	   {
			if(_balance >= amount) _balance -= amount;
	   }
   }
   double getBalance() {
		double temp;
#pragma omp critical 
	   {
			temp =  _balance;
	   }
	   return temp;
   }
   
   void setBalance(int x) {
#pragma omp critical 
	   {
			_balance = x;
	   }
   }
      
};


int main()
{
   BankAccountScoped *my_accountS = new BankAccountScoped;
   cout << "Testing Scope Locked Bank Account" << endl;
#pragma omp parallel sections
   {
#pragma omp section
   my_accountS->deposit(100.00);
#pragma omp section
   my_accountS->deposit(150.00);
#pragma omp section
   my_accountS->deposit(200.00);
#pragma omp section
   my_accountS->deposit(250.00);
#pragma omp section
   my_accountS->withdraw(200.00);
   }
   cout.precision(2);
   cout << "After all is said and done, my balance should be $1000.00 \n";
   cout << fixed << "and was just computed to be " << my_accountS->getBalance() << endl;


   BankAccountCritical *my_accountC = new BankAccountCritical;
   cout << "\n\nTesting Critical Section protected Bank Account" << endl;
#pragma omp parallel sections
   {
#pragma omp section
   my_accountC->deposit(100.00);
#pragma omp section
   my_accountC->deposit(150.00);
#pragma omp section
   my_accountC->deposit(200.00);
#pragma omp section
   my_accountC->deposit(250.00);
#pragma omp section
   my_accountC->withdraw(200.00);
   }
   cout.precision(2);
   cout << "After all is said and done, my balance should be $1000.00 \n";
   cout << fixed << "and was just computed to be " << my_accountC->getBalance() << endl;
return 0;
}

