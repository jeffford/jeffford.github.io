/* The ASC Minimum Spanning Tree - with slight modifications from ASC PRIMER */
main mst

/* Note: Vertices were encoded as integers */

deflog (TRUE, 1);
deflog (FALSE, 0);

int parallel tail[$], head[$];
int parallel weight[$], state[$];
int scalar nodehead, nodetail;
index parallel xx[$];
logical parallel nxtnod[$], graph[$], result[$];

associate head[$], tail[$], weight[$], state[$] with graph[$];

/* On a directed graph, the arrow goes from tail to head */
read tail[$], head[$], weight[$] in graph[$];

/* Picks first node and edge. */
setscope graph[$]
	nodetail = tail[mindex(weight[$])];
      nodehead = head[mindex(weight[$])];
endsetscope;

msg "nodetail and nodehead " nodetail, nodehead;
/* Select all edges incident with node and put them in V2; else 
put them in V3 */
if (nodetail == tail[$]) then state[$] = 2; else state[$] = 3; endif;
print tail[$], head[$], state[$] in graph[$];

state[nxtnod[$]] = 1; /* Before- failed to put start node in V1 */
/* Correct for edge just selected */
if (head[$] == nodehead && tail[$] == nodetail) then state[$] = 1; endif;

/* Throw out reverse edge */
if (head[$] == nodetail && tail[$] == nodehead) then state[$] = 0; endif;

while xx in (state[$] == 2)  /* Loop until there are no more nodes
                             in V2 */
      /* Select lowest order PE holding minimum weight of those
      nodes in V2 */
	if (state[$] == 2) then nxtnod[$] = mindex(weight[$]); endif;
 	
/* If selected XY for V1, throw out YX the double edge */
if (head[$] == nodetail && tail[$] == nodehead)then state[$] = 0; endif;

	/* Throw out edges with head the same as one picked */
	if (head[$] == nodehead && state[$] != 1) then
		state[$] = 0;  endif; 

	/* Get new candidates */
	if (state[$] == 3 && nodehead == tail[$]) then state[$] = 2; endif;

	nxtnod[$] = FALSE; 	/* must clear when done for next iteration */
endwhile xx;

if (state[$] == 1) then result[$] = TRUE; endif;
print tail[$] head[$] weight[$] in result[$];

end;
	

