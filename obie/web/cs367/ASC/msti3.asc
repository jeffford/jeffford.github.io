/* The ASC Minimum Spanning Tree - with slight modifications from ASC PRIMER */
main mst

/* Note: Vertices were encoded as integers */

deflog (TRUE, 1);
deflog (FALSE, 0);

int parallel tail[$], head[$];
int parallel weight[$], state[$];
int scalar node, loopcount;
index parallel xx[$];
logical parallel nxtnod[$], graph[$], result[$];

associate head[$], tail[$], weight[$], state[$] with graph[$];

read tail[$], head[$], weight[$] in graph[$];

setscope graph[$]
node = tail[mindex(weight[$])];
endsetscope;

if (node == tail[$]) then state[$] = 2; else state[$] = 3; endif;

loopcount = 0;
while xx in (state[$] == 2)
msg "In loopcount = " loopcount;
      if (state[$] == 2) then nxtnod[$] = mindex(weight[$]); endif;
print tail[$], head[$], weight[$], nxtnod[$] in (state[$] == 2);
      node = head[nxtnod[$]];
msg "node value is " node;
      state[nxtnod[$]] = 1;
print tail[$], head[$], state[$] in graph[$];
      if (head[$] == node && state[$] != 1) then
		state[$] = 0;  endif;
print tail[$], head[$], state[$] in graph[$];

      if (state[$] == 3 && node == tail[$]) then state[$] = 2; endif;
print tail[$], head[$], state[$] in graph[$];
      nxtnod[$] = FALSE; 	/* must clear when done for next iteration */
loopcount = loopcount + 1;
endwhile xx;

if (state[$] == 1) then result[$] = TRUE; endif;
print tail[$] head[$] weight[$] in result[$];

end;
	

