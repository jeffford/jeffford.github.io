/* The ASC Minimum Spanning Tree - with slight modifications from ASC PRIMER */
main mst
/* Note: Vertices were encoded as integers */
deflog (TRUE, 1);
deflog (FALSE, 0);

int parallel tail[$], head[$];
int parallel weight[$], state[$];
int scalar node, tmp, loopcounter;
index parallel xx[$];
logical parallel nxtnod[$], graph[$], result[$];

associate head[$], tail[$], weight[$], state[$] with graph[$];

read tail[$], head[$], weight[$] in graph[$];

/* setscope graph[$]
node = tail[mindex(weight[$])];
endsetscope;
*/
node = 1;

    msg "node is " node;

if (node == tail[$]) then state[$] = 2; else state[$] = 3; endif;
    print tail[$], head[$], state[$] in graph[$];

loopcounter = 0;
while xx in (state[$] == 2)
    msg "entering loop- loopcounter is " loopcounter;

tmp = node;
    msg "tmp is node selected and is " tmp;

	if (state[$] == 2) then nxtnod[$] = mindex(weight[$]); endif;
    print tail[$], head[$], state[$] in (state[$] == 2);

      	node = head[nxtnod[$]];
    msg "node is " node;
    msg "*****edge selected is " tmp, node;
 
    	state[nxtnod[$]] = 1;
    print tail[$], head[$], state[$] in graph[$]; 

if (head[$] == tmp && tail[$] == node) then state[$] = 0; endif; /*eliminate reverse edge*/
    msg "Just eliminated one edge from consideration" node, tmp;
    print tail[$], head[$] in state[$] == 0;	

	if (head[$] == node && state[$] != 1) then
		state[$] = 0;  endif;
    print tail[$], head[$] in state[$] == 0;
    msg "Just eliminated other edges";

	if (state[$] == 3 && node == tail[$]) then state[$] = 2; endif;
    msg "select new candidates";
        print tail[$], head[$] in state[$] == 2;

	nxtnod[$] = FALSE; 	/* must clear when done for next iteration */
    loopcounter = loopcounter + 1;
endwhile xx;

if (state[$] == 1) then result[$] = TRUE; endif;
print tail[$] head[$] weight[$] in result[$];
end;
	

