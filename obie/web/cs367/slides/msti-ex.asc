/* The ASC Minimum Spanning Tree - with slight modifications from ASC PRIMER */
main mst

/* Note: Vertices were encoded as integers */

deflog (TRUE, 1);
deflog (FALSE, 0);

int parallel tail[$], head[$];
int parallel weight[$], state[$];
int scalar node, tmp;
index parallel xx[$];
logical parallel nxtnod[$], graph[$], result[$];

associate head[$], tail[$], weight[$], state[$] with graph[$];

read tail[$], head[$], weight[$] in graph[$];

setscope graph[$]
node = tail[mindex(weight[$])];
endsetscope;

/* Node is the starting node, picked either as in the code or by 
starting with node 1 
   Selected all edges incident to it and place in V2, else place 
   in V3. */
if (node == tail[$]) then state[$] = 2; else state[$] = 3; endif;

while xx in (state[$] == 2)
	/* Find an edge in V2 with minimal weight */ 
	if (state[$] == 2) then nxtnod[$] = mindex(weight[$]); endif;
      	node = head[nxtnod[$]];

      /* Mark the edge as being in the solution */
     	state[nxtnod[$]] = 1; 
	
	/* Eliminate from further consideration all edges that have 
	their heads the same as the picked edge and are not already 
	in the solution */
	if (head[$] == node && state[$] != 1) then
		state[$] = 0;  endif;
	
	/* Select new candidate edges for the next round by choosing
	edges incident to */
	if (state[$] == 3 && node == tail[$]) then state[$] = 2; endif;
	nxtnod[$] = FALSE; 	/* must clear when done for next iteration */
endwhile xx;

if (state[$] == 1) then result[$] = TRUE; endif;
print tail[$] head[$] weight[$] in result[$];

end;
	

